Misc:

   Note: I "fixed" a small bug with signal mem storage to 

   Add byte space and symbol space structs and functions, rework code to use them throught the codebase.

   I'm tired of having to handle printf style functions.
      Just code an alternative, have it support the kind of expressions that you frequently use, everything else can be equal to printf style

   Change the names generated by the -s (simple) option to actually use the names of inputs of the module.

   Stop using asserts for likely user errors. Parser is full of asserts that are actually faulty user data. Need to grapple with things now before they become more complex, even if in the future there is likelihood that things will change.
   Hard to reason with fixed buffer because we immediatly transform delay into a parameter string. Having to parse the delay is not a solution. Figure out what to do and remove all the portions of code that parse the delay out from the unit
   Should probably generate a FUInstance unit test, that runs an unit individually and make sure that the unit correctly implements the interface expected by Versat. The user simply calls a function with the unit it wants to test and it outputs a verilog testbench that exercises the unit. Most common sources of errors are gonna be delay = 0, not outputting done when done (the testbench should enter an infinite loop, do not know any other way to test this), following the specifications of the "iob" interface and the semi axi interface, among other things.

   Change the CompareString functions to a operator ==

Literal:

   In verilog, it should compile into a literal as well.
      Store literal inside FUInstance, like the delay value for buffers and stuff like that. Eventually make it a union

Specification Parser:

   The parser is not taking into account the delay inside expressions. (ex: b = a[0] + a[1] + a[2])
   Add arrays, instead of having to type every unit repeatedly.

Testbench:

   Rework testbench
      Add subtests
      Use a more data oriented approach. Kinda problematic when running in embedded, so make small changes and test in embedded to make sure not doing anything too much complicated.
      Define test groups, instead of using the preprocessor thingy.

   Use more randomized testcases, specially for floating point numbers and things that are "hard" in hardware but easy to check in software

Major change:

   Need to start standarizing a lot of things. Types sizes and stuff like that.

   To implement different bit widths, have Versat generate the sources it wants to instantiate and run Verilator over it.
      Compile and build everything into a shared library, which is then opened by Versat.
      Also, if we require units to use the ADDR_W parameter, we can switch to compiling for 64 bits again.

   As an optimization, it should be possible to generate the entire circuit and use it, instead of relying on simulating individual units.
      Should check it out as a possibility. The biggest issue is the potential problem for Verilator to spend much more time during compilation for barely any gain, but at that point need to check if so.
      Even if slower, should be good to support it, as we then have the ability both ways. Fully verilated and partially verilated

   A lot of the calculations being done in the FUDeclaration is already being done in the CreateFUInstance function of the Accelerator.
   This is actually expected. The registerSub function expects to receive an actual working Accelerator, and from them to generate a generic template instance.
   We make a couple of changes, like removing multiple inputs and adding delays, but somethings I think could be carried over, like static info and such
   See if it's possible to keep the composite instance "existing" even after the flattening. The only major problem I see is the way memory mapped accesses work.
      The main objective is to make it so that the code works by getting subinstances from other instances, and that we keep the same code working even after doing flattening of the hierarchy.

Graph optimizations:

   Adding the concept of weight to units would allow a number of optimizations to be performed, automatically by Versat.
      The calculate delay and fix graphs could potently replicate units if adding the delays would lead to a bigger overall weight.
      The weight could be simply set by the user for the simple units, while composite units would only need to add up all their instances weights.
      To calculate the weight, we could just compile the unit standalone and take the value of the amount of LUTs used.
      We could also add multiple weights, one for LUTs, another for memories, and so one.
      Remove unused nodes (and alert the user)

   Change linear operations from lists into trees (think adders, logic operations and the likes).
      Ideally start by joining everything into a single unit, with multiple edges to the same port.
      Then check if it's possible to change connection based on associativity.
      Then break up into the tree shape

   Change connections for associative operations
   Partition buffers into multiple parts if they are connected to the same output (If one input requires a buffer of 2 and the other 3, we can use a 2 buffer plus a 1 buffer connected to the 2 buffer, instead of a 3 buffer [basically moving the fanout down the path]).

   Move delays and buffers upwards or downwards the paths. Instead of unit with 1 input and 8 outputs having 8 buffers, we could just have 1 buffer. 
      Probably needs to be modelled as a optimization problem, since we can also encounter a problem with 8 inputs and 1 output and we have to move the buffer downwards.

Accelerator 
   
   It would be helpful and easier if top level static units didn't allocate config space as static space, it would be useful if it allocated everything continuously.
   The main issue is that if we do that, then dealing with a top level acceleration and an equal subaccelerator would lead to different results.
   A function F that expects to receive any accelerator of a certain type, would produce different results for F(topLevel) and F(compositeInstance of RegisterSub(topLevel)).
      Techinically there would be no problem if we still used the auxiliary hashmap to static data.
      Basically the code would stay the same, the only difference would be that we would allocate config and static in the same space, the rest would be similar.
         And in doing so, we would simplify the code that interacts with the accelerator.
         Probably would do the same with delays and call it a day. Allocate everything in a row, but still keep auxiliary pointers and structures if needed.

Embedded data:

   The named access to FUInstances is actually the best way to go. 
      All we need is to separate the generation of the versat_data.inc file from the remaining of the code.
      This allows the user to separate the generation of versat from the test code.
      But on the other hand, we must force the user to always run the simulation code before compiling.
      Maybe add a debug flag to output all the data available anyway.

Delay and Time:

   Introduce the concept of input delay and output delay.
      Represented in verilog by the wires delayInX, where X is the input port number, and delayOutX.
      delayIn is used for units that consume input and need to know when the input is valid. 
      delayOut is used for units that produce output and need to know when to start producing.
      The concepts of compute only, source, sink and source_sink can be derived from knowing which type each unit provides.

|  Add a "constant" edge, which is time agnostic (no buffer is ever added to a constant edge)
      Useful for units that produce a constant value.
      Maybe the concept should be applied to the unit itself, and not to the edge. But if so, it would be hard to propagate that info accross hierarquies. 
         Technically, the way we handle hierarquies, we try to push everything outwards as much as possible.
            Therefore appling the concept to the unit is probably a decent idea.
         For now, let the circuit designer handle this by setting himself the constant edges and stuff.
      Or maybe the concept should be applied to the port? The common use case would be a input unit, think const, that is connected to two other units with different delay requirements.
         The most important part is to make sure that we do not add buffer units for values that are constant from the moment unit starts producing valid data.
         Do not know how useful would a "constant" edge be in a world where we can already decide if the units port is constant or not. 
         Maybe when making accelerators where the final decision of when data is valid rests on the designer, and therefore no point in adding buffers.
            But in that case, maybe there is a better way of handling this cases? 

+  Remove base delay from FUInstance. Unneeded for multiple instances, should be replace by storing data on the FUDeclaration and/or temporarily on GraphData?
      A "hack" that shouldn't have been made, doesn't even work for merged accelerators, as we can have multiple base delays. Also delays should be port based, not instance based.

   Check how merging affects delay and buffer calculations.

   Should the concept of data validity be extended to remove the fact that data is assumed valid forever after the unit starts producing valid data?
      Some units only produce valid data after X cycles. Think things like iterative units and complex FPU units that aren't pipelined.
      The concept is useful, especially if we can use it to make storing data to memory. It should also allow units that are not easily pipelinable to produce more than one valid data per iteration. 
      The problem is how to fix the timing for complex graphs. (Imagine a unit whose inputs produce valid every 2 cycles and another every 3 cycles).

   Further abstract the concept of iterative units. 
      Some units, like FPU div and such, work like iterative units.
      Ultimately, we use the concept of "iterative units" as a hack for the fact that Versat cannot represent units that only output valid data after every X cycles.
      It should be possible to define normal units as iterative, instead of only defined as graphs and through the use of ParseVersatSpecifications.

 Iterative units:
   
Configuration management:

   Add an interface to provide the user with the ability to save and load configurations.
      Need to add two types. Software sided saving and loading of configuration (Data is not stored on accelerator).
      Hardware sided saving and loading of configuration (Data is stored on accelerator).
      Provide ways to change from one side to the other.
      Provide ways to save data in PC-Emul and load it in embedded.
      Need to clearly separate where data is stored.

Parser:

+  Create a fuzzing test system to really hammer away parsing bugs.
      For starters, the test system takes a ordered collection of tokens already separated by the tester that is guaranteed to produce valid input.
      The fuzzer then uses that collection to produce a multitude of inputs that can potently fail 
      Random ways of producing failing inputs:
         Change order of tokens
         Insert whitespaces between random tokens
         Completely change the token with random garbage
         Completely replace token with whitespace (effectevely remove it)
         More specific: Insert at the start of the token a common character known to produce errors (ex: a digit, which usually cannot be found at a start of a identifier, etc.)
      Two things to test for: If the parser gracefully fails and if it produces a good error message, instead of simply asserting away.
      Override linux signal handlers to make sure we have actually output the test that cause the bug in the first place.
      We can add the fuzzer to the list of automatic tests that we continuosly run all the time. Use the compile time seed to make sure we can rerun the test later.

|  Change parsing of expressions to be much more correct, check some of the algorithms seen in the net. Make it explicit the precedence and associativity of operators

Optimizations:

   Profile the effects of the assertions in the code. Make sure debug mode isn't running too slow when compared to release
      Especial attention to the Array class operator[]. Taking a performance hit every time we access an array might cause problems later one. We can always replace the code when we actually reach that point, though.

   The RegisterSubUnit function is allocating space for every single units offset.
      This isn't needed, we could have if statements in the populate function that check wether the unit has actually need or not to have the field populated.
      In fact, currently units are having their configuration pointers point to somebody else configuration space. Ideally we should set the pointers to nullptr, as it should be a segfault accessing other units configurations.
      Also, investigate wether we need the offset arrays for outputs and extraData, instead of just using push pointers.

Template Engine:

   The engine isn't fully parsing the templates.
      The Eval call is parsing some things. Everything should be parsed on the Parse function and the Eval function should never have to parse a single line.

   A little bit of code would be enough to make the output look more consistent, instead of having random lines being forward or backwards compared to other lines.
      Basically, if a line only contains commands and no text, it should just be "removed", in the sense that it shouldn't produce any effect in the output.
         Lines of text should just be copied to the output with the same spacing. (Probably would be best to change processing to be more line based.)
      If a line contains a mixture of commands and text, probably should just remain the same.

   Rework the parser to operate in a line by line basis.
      Augment error reporting with indication of the line where the error occured.

Templates:

   Do a template pass to remove duplicate code, lock down on the approach used to identify units and wires. Different templates should almost resemble each other. All the logic should be shared between units and should rely on common ground.
   Allow the use of enums inside templates. (See parsing enum info on Type)
   Add local variables. Need to introduce the concept of "stack frames".

   The Command structure is not needed, I think. Does the same thing as an expression.

Parser:

   The single and special chars of the parser should be a detachable portion of the parser which is costructed inside an arena.
   The standalone thingy would be constructed by passing the single and special chars which the tokenizer class is currently receiving.
   The construction phase would guarantee that things would be correctly ordered. (meaning that if we had something like "=" first and "==" second, it would check for "==" instead of just checking for "=" and returning).
   It would then be possible to change the special chars that the tokenizer responds to easier, instead of creating a new tokenizer class.
      A region or something like that could even be used to make it easer to change back after exiting a function
         (It would be a class that points to the tokenizer, saves the old thingy and restores it in the destructor).
   We would have to change the implementation of the tokenizer to return a integer that is associated to the token (passed when constructing the thingy).
      We could then use the return value inside a switch statement, simplifing the code somewhat.
      I would implement the thingy first as an array of ~96 chars (common ascii plus spaces and tabs and stuff like that [which we can check ]) which would quickly indicate if (it's a token, it's not a token, can be a token (points to a trie))

Merge:

   In order to handle the type and name problem, the specify type info in the GetInstance function is not the way to go.
      We should keep extra info inside the accelerator (or use information from the declaration) and the GetInstance function should match based on the currently activated Accelerator.

   It would be helpful to have a way of storing the result of a merge, so that multiple invocations of versat do not spend time recomputing.

GUI:

   After spending sometime using gui, two changes would greatly improve the experience:
      The filter as it stands it's kinda of clubersome. Would be great to:
         Change the Single, Composite Or and And stuff into checking for special units. (Buffer, Muxs, stuff that Versat instantiates).
         Would also be useful to implement a name filter, so that we quickly could get 
      There should be a specialized window for looking at a FUDeclaration, the same way there exists for the Accelerator.
         Show the default configurations associated to which wires.

   Add a option to quickly search for text in any given "panel". Put a small search bar in every panel and implement some helm style matching.
      Just be careful with the fact that the index "returned" must still be the original one, not the search and sorted index.

Type:

   Do a pass over the use of the temp identifier. It's kind of an hack 
   Keep and seperate unsigned entities from signed types. 
   Parse and generate enum information.

Threading:

   Probably the only use for threading at the moment is to speed up merging of units or to implement the accelerator in a seperate thread. Everything else is simple enough that a single thread program could run it in less than a second.

   Salvage everything you can from the Parallel Merge implementation.
   Implement a task as something you push into an arena. Add a next pointer to the task. Adding a task to the pool uses that pointer to keep track of tasks instead of using static memory.
      It's the programmers responsibility to ensure the task memory is properly allocated through the entire time the task is being executed.
      Add an indicator to the task to check when it's completed or not.
         Maybe add a special type of task where you can wait on them by using a conditional variable.
   Implement a taskgroup.
      Gives common tasks the ability to wait on only those tasks to end, instead of every task currently in the task pool.
      Also have ideas for things like priority and such, but no need for anything like that, for now. 

Static and share 
   
   Technically, there isn't anything stopping us from having static share units (Static share config Const {...}).
      Static inside share blocks is not allowed, because what would we do inside a share block if a unit is static and the other is not?.

Threaded accelerator simulation

   Should be simple, but test whether we can simulate the accelerator in another thread.
      The only problem is the fact that right now memory mapped units have to go through the verilator layer.
      We would need to stop the accelerator from running or let the main thread be the one doing the write (but the read would be problematic).

Misc:

   Check the io_uring interface for async file io. Maybe useful for the output of VCD files, which can slow down a lot the program, especially for large runtime accelerators. Might not need the full library, just check how it works

Current know bugs/problems:

   The memory used by the accelerator is all over the place. List nodes, units names and the like.
   We are also not freeing the nodes for accelerators when reorganizing.
      Easiest change would be to add a function that allocates a new dynamic arena, copies the instance nodes, the instances names, free the old arena, replace it and then call reorganize accel, thus guaranteeing that all the memory being used is actually needed.

Small stuff, almost a TODO:

   Change the function from RegisterUnit to a function that simple returns the declaration.
      Some parts of the code do not want to register, they want the declaration first and then perform some small changes. Functions just want to be pure
   The concept of combinatorial unit is not fully realized. 

Legend:

   > Currently working on, important
   + Should be next, but taking a backseat to other, more important issues
   |  Subject to change, not final
   -  Not important, low priority or can be bypassed by hardcoding stuff until absolutely needed
